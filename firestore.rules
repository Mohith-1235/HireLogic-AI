/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user data and allows open reads for contact messages.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles. The `userId` in the path must match the authenticated user's UID for all operations.
 * - /contactMessages/{contactMessageId}: Stores contact form submissions.  These are publicly readable and writable.
 *
 * Key Security Decisions:
 * - User data is strictly controlled by the owner. Users can only create, read, update, and delete their own profile data.
 * - Contact messages are publicly accessible without authentication.
 * - Data shape validation is not enforced, allowing for rapid prototyping.
 *
 * Denormalization for Authorization:
 * - The `users` collection enforces that the document ID matches the `request.auth.uid`.
 *
 * Structural Segregation:
 * - User data and contact messages are stored in separate collections, allowing for different security policies.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user profiles, ensuring that each user can only access their own data.
     * @path /users/{userId}
     * @allow (create) - Authenticated user creates their own profile with a matching userId.
     *   - Request: auth.uid = "user123", resource.data.id = "user123"
     * @allow (get, list, update, delete) - Authenticated user accesses their own profile.
     *   - Request: auth.uid = "user123", path = "/databases/(default)/documents/users/user123"
     * @deny (create) - Authenticated user attempts to create a profile for another user.
     *   - Request: auth.uid = "user123", resource.data.id = "otherUser"
     * @deny (get, list, update, delete) - Authenticated user attempts to access another user's profile.
     *   - Request: auth.uid = "user123", path = "/databases/(default)/documents/users/otherUser"
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      // Helper function to check if the authenticated user is the owner of the document.
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Helper function to check if the authenticated user is the owner of the existing document.
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Read permissions
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      // Write permissions
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages contact messages submitted through the contact form. Allows anyone to create, read, update and delete.
     * @path /contactMessages/{contactMessageId}
     * @allow (create, get, list, update, delete) - Any user can create, read, update or delete contact messages.
     * @principle Allows public read and write access to contact messages for prototyping purposes.
     */
    match /contactMessages/{contactMessageId} {
      allow get, list: if true;
      allow create: if true;
      allow update: if true;
      allow delete: if true;
    }
  }
}